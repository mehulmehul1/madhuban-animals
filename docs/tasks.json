{
  "master": [
    {
      "id": "anim-1",
      "name": "Anatomical Constraint System",
      "details": "Build the system for applying realistic, data-driven anatomical joint constraints to FIK.js skeletons, as per the 'Advanced Creature Animation Systems' guide.",
      "status": "in-progress",
      "dependencies": [],
      "subtasks": [
        {
          "id": "anim-1.1",
          "name": "Integrate FIK.js Library",
          "details": "Create a wrapper or manager within Creature.js to handle the creation and state of FIK.Structure3D and FIK.Chain3D objects. Ensure the library is correctly loaded and accessible.",
          "status": "in-progress"
        },
        {
          "id": "anim-1.2",
          "name": "Design ConstraintProfile Data Structure",
          "details": "Create a JSON or object schema for defining joint constraints. It should support hinge joints (axis of rotation) and ball-and-socket joints (cone angle limits), based on the guide's specifications.",
          "status": "todo"
        },
        {
          "id": "anim-1.3",
          "name": "Implement ConstraintManager",
          "details": "Develop a manager that takes a creature's skeleton and a ConstraintProfile, then iterates through the bones, applying the appropriate constraints using FIK.js's built-in methods (e.g., `addConsecutiveRotorConstrainedBone`, `setBallJointConstraint`).",
          "status": "todo"
        },
        {
          "id": "anim-1.4",
          "name": "Create a Visual Test Rig",
          "details": "Build a simple test case with a single, multi-bone leg to visually debug and validate that the joint constraints (e.g., a knee that only bends backward) are being correctly applied and enforced by the IK solver.",
          "status": "todo"
        }
      ]
    },
    {
      "id": "anim-2",
      "name": "Generic Locomotion Engine",
      "details": "Develop a flexible, high-level controller that can manage different types of procedural locomotion (gait-based, serpentine, etc.).",
      "status": "todo",
      "dependencies": [
        "anim-1"
      ],
      "subtasks": [
        {
          "id": "anim-2.1",
          "name": "Design Generic Locomotion Controller",
          "details": "Create a controller that can load and execute different locomotion strategies (e.g., a 'Gait' strategy for bipeds/quadrupeds, a 'SineWave' strategy for fish/snakes).",
          "status": "todo"
        },
        {
          "id": "anim-2.2",
          "name": "Implement Gait-Based Locomotion Strategy",
          "details": "Implement the logic for gait-based movement, including phase-based footfall timing, a stepping algorithm (stance/swing detection), and foot swing trajectories. This should be data-driven by a 'Gait Profile'.",
          "status": "todo"
        },
        {
          "id": "anim-2.3",
          "name": "Implement Sine-Wave Locomotion Strategy",
          "details": "Implement the logic for serpentine movement, where a sine wave propagates down a single IK chain to create undulation. Parameters (amplitude, frequency) should be controllable.",
          "status": "todo"
        }
      ]
    },
    {
      "id": "render-1",
      "name": "Shape Generation Engine (PathEngine)",
      "details": "Develop the 'bridge' between the solved IK system and the decoration components by generating a renderable outline from a bone chain.",
      "status": "todo",
      "dependencies": [
        "anim-2"
      ],
      "subtasks": [
        {
          "id": "render-1.1",
          "name": "Implement the `WidthProfile` system",
          "details": "Create a system for defining the width of a creature's body parts at any point along a bone chain. This should be a data structure (e.g., an array of values) associated with each renderable IK chain.",
          "status": "todo"
        },
        {
          "id": "render-1.2",
          "name": "Create the `PathEngine.generateOutline` function",
          "details": "This function will take a solved bone chain (an array of p5.Vector points) and a width profile, and it will generate a smooth outline (a path of p5.Vector points) representing the creature's skin.",
          "status": "todo"
        }
      ]
    },
    {
      "id": "render-2",
      "name": "Decoration Pipeline Integration",
      "details": "Connect the generated outlines from the PathEngine to the full styling and decoration pipeline (Segmenter, Filler, BorderDecorator).",
      "status": "todo",
      "dependencies": [
        "render-1"
      ],
      "subtasks": [
        {
          "id": "render-2.1",
          "name": "Update Creature `draw` loop",
          "details": "Modify the main `draw` loop to use `PathEngine.generateOutline` and pass the resulting path to the decoration components.",
          "status": "todo"
        },
        {
          "id": "render-2.2",
          "name": "Apply ThemeManager Styles",
          "details": "Ensure all colors, patterns, and border styles used in the decoration are pulled from the `ThemeManager` to create a cohesive look.",
          "status": "todo"
        }
      ]
    },
    {
      "id": "mvp-content",
      "name": "MVP Creature Implementation",
      "details": "Create the data profiles (skeleton, constraints, locomotion, width) for each of the four target MVP creatures.",
      "status": "todo",
      "dependencies": [
        "render-2"
      ],
      "subtasks": [
        {
          "id": "mvp-content.1",
          "name": "Create Fish Profile",
          "details": "Define the skeleton, width profile, and sine-wave locomotion parameters for the fish.",
          "status": "todo"
        },
        {
          "id": "mvp-content.2",
          "name": "Create Crane Profile",
          "details": "Define the skeleton, constraint profile, width profile, and bipedal gait parameters for the crane.",
          "status": "todo"
        },
        {
          "id": "mvp-content.3",
          "name": "Create Horse Profile",
          "details": "Define the skeleton, constraint profile (erect posture, unguligrade), width profile, and quadrupedal gait parameters for the horse.",
          "status": "todo"
        },
        {
          "id": "mvp-content.4",
          "name": "Create Lizard Profile",
          "details": "Define the skeleton, constraint profile (sprawling posture), width profile, and quadrupedal gait parameters for the lizard.",
          "status": "todo"
        }
      ]
    },
    {
      "id": "mvp-final",
      "name": "Final Integration & Scene Switching",
      "details": "Implement the final user-facing feature: switching between the completed creatures.",
      "status": "todo",
      "dependencies": [
        "mvp-content"
      ],
      "subtasks": [
        {
          "id": "mvp-final.1",
          "name": "Implement Creature Loader",
          "details": "Create a system that can load a creature's complete profile (skeleton, constraints, etc.) from data files or objects.",
          "status": "todo"
        },
        {
          "id": "mvp-final.2",
          "name": "Implement Keyboard Input",
          "details": "Hook up keyboard presses (1, 2, 3, 4) to load and display the corresponding creature.",
          "status": "todo"
        }
      ]
    }
  ],
  "archive": [
    {
      "id": "setup-1",
      "name": "Project Consolidation",
      "details": "Merge the `madhuban-animals` and `madhuban-dayone` codebases into a single, unified project. All subtasks completed.",
      "status": "done"
    }
  ]
}

